#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'virtmach'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/virtmach` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/virtmach now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Virtmach::VERSION

desc 'Verbose - in detail'
default_value 'true'
switch [:v,:verbose]

desc 'dryrun - install without the install'
default_value 'true'
switch [:t, :dryrun]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:b,:flagname]

desc 'Describe new here'
arg_name 'Describe arguments to new here'
command :new do |c|
  c.desc 'The name of the volume group if using lvm'
  c.default_value "VirtualMachines"
  c.flag :v

  c.desc 'Boot - the boot device '
  c.default_value 'cdrom'
  c.flag [:b,:boot]

  c.desc 'Name - the name of the Virtual Machine to create '
  c.default_value 'cdrom'
  c.flag [:n,:name]

  c.desc 'Size - the size of the install device in Gigabytes '
  c.default_value '20'
  c.flag [:s,:size]

  c.desc 'Boot - the boot device '
  c.default_value 'cdrom'
  c.flag [:d,:device]

  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "new command ran"
  end
end

desc 'Describe clone here'
arg_name 'Describe arguments to clone here'
command :clone do |c|
  c.action do |global_options,options,args|
    puts "clone command ran"
  end
end

desc 'Describe remove here'
arg_name 'Describe arguments to remove here'
command :remove do |c|
  c.action do |global_options,options,args|
    puts "remove command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
